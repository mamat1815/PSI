// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Mahasiswa
  StaffKampus
}

enum MembershipRole {
  Ketua
  Wakil
  Sekretaris
  Bendahara
  Anggota
}

model Skill {
  id     String  @id @default(cuid())
  name   String  @unique
  events Event[] @relation("EventSkills")
  users  User[]  @relation("UserSkills")
}

model Organisasi {
  id            String       @id @default(cuid())
  name          String       @unique
  email         String       @unique
  password      String
  description   String?      @db.Text
  logo          String?
  contact       String?
  category      String?
  memberships   Membership[]
  events        Event[]
}

model Event {
  id               String      @id @default(cuid())
  title            String
  description      String      @db.Text
  date             DateTime
  timeStart        String      @default("09:00") // Format: "HH:MM" (e.g., "09:00")
  timeEnd          String      @default("17:00") // Format: "HH:MM" (e.g., "17:00")
  location         String
  image            String?     // URL gambar event
  maxParticipants  Int?        // Batas maksimal peserta
  registrationDeadline DateTime? // Batas waktu pendaftaran
  status           String      @default("DRAFT")
  aiRecommendation String?     @db.Text
  skills           Skill[]     @relation("EventSkills")
  organizerId      String
  organizer        Organisasi  @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  participants     User[]      @relation("EventParticipants")
  feedback         Feedback[]
  committee        Committee[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt
}

model Committee {
  id      String @id @default(cuid())
  role    String
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([eventId, userId])
}

model Feedback {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([eventId, userId])
}

model Membership {
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organisasi     @relation(fields: [organizationId], references: [id])
  role           MembershipRole @default(Anggota)
  joinedAt       DateTime       @default(now())
  @@id([userId, organizationId])
}

// ========= MODEL BARU UNTUK ASPIRASI =========
model Aspirasi {
  id        String   @id @default(cuid())
  content   String   @db.Text
  category  String
  sentiment String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
// ===========================================

model User {
  id             String       @id @default(cuid())
  name           String?
  nim            String?      @unique
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  skills         Skill[]      @relation("UserSkills")
  role           Role         @default(Mahasiswa)
  accounts       Account[]
  sessions       Session[]
  jadwalKuliah   JadwalKuliah[]
  memberships    Membership[]
  events         Event[]      @relation("EventParticipants")
  feedback       Feedback[]
  committeeRoles Committee[]
  aspirasi       Aspirasi[] // <-- Tambahkan relasi baru ini
}

model JadwalKuliah {
  id         String @id @default(cuid())
  hari       String
  jamMulai   String
  jamSelesai String
  mataKuliah String
  ruangan    String
  dosen      String?
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
